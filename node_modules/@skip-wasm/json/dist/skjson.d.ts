import { type ptr, type Links, type Utils, type ToWasmManager, type Environment, type Shared } from "@skip-wasm/std";
import type * as Internal from "@skiplang/json/internal.js";
import type { JsonConverter } from "@skiplang/json";
export { toPtr, toNullablePtr, toNullablePointer } from "@skip-wasm/std";
export declare class SKJSONShared implements Shared {
    converter: JsonConverter;
    getName: () => string;
    constructor(converter: JsonConverter);
}
declare class LinksImpl implements Links {
    private readonly env;
    SKJSON_console: (json: ptr<Internal.CJSON>) => void;
    SKJSON_error: (json: ptr<Internal.CJSON>) => void;
    constructor(env: Environment);
    complete: (utils: Utils, exports: object) => void;
}
declare class Manager implements ToWasmManager {
    private readonly env;
    constructor(env: Environment);
    prepare: (wasm: object) => LinksImpl;
}
export declare function init(env: Environment): Promise<Manager>;
//# sourceMappingURL=skjson.d.ts.map