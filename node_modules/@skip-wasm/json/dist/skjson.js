import { toPtr, } from "@skip-wasm/std";
import { buildJsonConverter } from "@skiplang/json";
export { toPtr, toNullablePtr, toNullablePointer } from "@skip-wasm/std";
class WasmBinding {
    constructor(utils, fromWasm) {
        this.utils = utils;
        this.fromWasm = fromWasm;
    }
    SKIP_SKJSON_typeOf(json) {
        return this.fromWasm.SKIP_SKJSON_typeOf(toPtr(json));
    }
    SKIP_SKJSON_asNumber(json) {
        return this.fromWasm.SKIP_SKJSON_asNumber(toPtr(json));
    }
    SKIP_SKJSON_asBoolean(json) {
        return this.fromWasm.SKIP_SKJSON_asBoolean(toPtr(json));
    }
    SKIP_SKJSON_asString(json) {
        return this.utils.importString(this.fromWasm.SKIP_SKJSON_asString(toPtr(json)));
    }
    SKIP_SKJSON_asArray(json) {
        return this.fromWasm.SKIP_SKJSON_asArray(toPtr(json));
    }
    SKIP_SKJSON_asObject(json) {
        return this.fromWasm.SKIP_SKJSON_asObject(toPtr(json));
    }
    SKIP_SKJSON_fieldAt(json, idx) {
        return this.utils.importOptString(this.fromWasm.SKIP_SKJSON_fieldAt(toPtr(json), idx));
    }
    SKIP_SKJSON_get(json, idx) {
        return this.fromWasm.SKIP_SKJSON_get(toPtr(json), idx);
    }
    SKIP_SKJSON_at(json, idx) {
        return this.fromWasm.SKIP_SKJSON_at(toPtr(json), idx);
    }
    SKIP_SKJSON_objectSize(json) {
        return this.fromWasm.SKIP_SKJSON_objectSize(toPtr(json));
    }
    SKIP_SKJSON_arraySize(json) {
        return this.fromWasm.SKIP_SKJSON_arraySize(toPtr(json));
    }
    SKIP_SKJSON_startCJObject() {
        return this.fromWasm.SKIP_SKJSON_startCJObject();
    }
    SKIP_SKJSON_addToCJObject(obj, name, value) {
        this.fromWasm.SKIP_SKJSON_addToCJObject(toPtr(obj), this.utils.exportString(name), toPtr(value));
    }
    SKIP_SKJSON_endCJObject(obj) {
        return this.fromWasm.SKIP_SKJSON_endCJObject(toPtr(obj));
    }
    SKIP_SKJSON_startCJArray() {
        return this.fromWasm.SKIP_SKJSON_startCJArray();
    }
    SKIP_SKJSON_addToCJArray(arr, value) {
        this.fromWasm.SKIP_SKJSON_addToCJArray(toPtr(arr), toPtr(value));
    }
    SKIP_SKJSON_endCJArray(arr) {
        return this.fromWasm.SKIP_SKJSON_endCJArray(toPtr(arr));
    }
    SKIP_SKJSON_createCJNull() {
        return this.fromWasm.SKIP_SKJSON_createCJNull();
    }
    SKIP_SKJSON_createCJInt(v) {
        return this.fromWasm.SKIP_SKJSON_createCJInt(v);
    }
    SKIP_SKJSON_createCJFloat(v) {
        return this.fromWasm.SKIP_SKJSON_createCJFloat(v);
    }
    SKIP_SKJSON_createCJString(str) {
        return this.fromWasm.SKIP_SKJSON_createCJString(this.utils.exportString(str));
    }
    SKIP_SKJSON_createCJBool(v) {
        return this.fromWasm.SKIP_SKJSON_createCJBool(v);
    }
}
export class SKJSONShared {
    constructor(converter) {
        this.converter = converter;
        this.getName = () => "SKJSON";
    }
}
class LinksImpl {
    constructor(env) {
        this.env = env;
        this.complete = (utils, exports) => {
            const binding = new WasmBinding(utils, exports);
            const converter = buildJsonConverter(binding);
            this.SKJSON_console = (json) => {
                console.log(converter.importJSON(json), true);
            };
            this.SKJSON_error = (json) => {
                console.error(converter.importJSON(json, true));
            };
            this.env.shared.set("SKJSON", new SKJSONShared(converter));
        };
    }
}
class Manager {
    constructor(env) {
        this.env = env;
        this.prepare = (wasm) => {
            const toWasm = wasm;
            const link = new LinksImpl(this.env);
            toWasm.SKIP_SKJSON_console = (value) => {
                link.SKJSON_console(value);
            };
            toWasm.SKIP_SKJSON_error = (value) => {
                link.SKJSON_error(value);
            };
            return link;
        };
    }
}
export function init(env) {
    return Promise.resolve(new Manager(env));
}
//# sourceMappingURL=skjson.js.map