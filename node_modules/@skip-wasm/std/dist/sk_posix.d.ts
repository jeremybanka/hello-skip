import type { int } from "@skiplang/std";
import type { ptr, Environment, Links, ToWasmManager, Utils } from "./sk_types.js";
import type * as Internal from "@skiplang/std/internal.js";
interface ToWasm {
    SKIP_check_if_file_exists: (skPath: ptr<Internal.String>) => boolean;
    SKIP_js_open: (skPath: ptr<Internal.String>, flags: int, mode: int) => int;
    SKIP_js_close: (fd: int) => void;
    SKIP_js_write: (fd: int, skContents: ptr<Internal.String>, len: int) => int;
    SKIP_js_read: (fd: int, skContents: ptr<Internal.String>, len: int) => int;
    SKIP_js_open_flags: (read: boolean, write: boolean, append: boolean, truncate: boolean, create: boolean, create_new: boolean) => int;
    SKIP_js_pipe: (...args: any[]) => any;
    SKIP_js_fork: (...args: any[]) => any;
    SKIP_js_dup2: (...args: any[]) => any;
    SKIP_js_execvp: (...args: any[]) => any;
}
declare class LinksImpl implements Links, ToWasm {
    private readonly fs;
    SKIP_check_if_file_exists: (skPath: ptr<Internal.String>) => boolean;
    SKIP_js_open: (skPath: ptr<Internal.String>, flags: int, mode: int) => int;
    SKIP_js_close: (fd: int) => void;
    SKIP_js_write: (fd: int, skContents: ptr<Internal.String>, len: int) => int;
    SKIP_js_read: (fd: int, skContents: ptr<Internal.String>, len: int) => int;
    SKIP_js_open_flags: (read: boolean, write: boolean, append: boolean, truncate: boolean, create: boolean, create_new: boolean) => int;
    SKIP_js_pipe: () => any;
    SKIP_js_fork: () => any;
    SKIP_js_dup2: () => any;
    SKIP_js_execvp: (...args: any[]) => any;
    SKIP_js_invalid: (...args: any[]) => any;
    constructor(environment: Environment);
    complete: (utils: Utils, _exports: object) => void;
}
declare class Manager implements ToWasmManager {
    private readonly environment;
    constructor(environment: Environment);
    prepare: (wasm: object) => LinksImpl;
}
export declare function init(env?: Environment): Promise<Manager>;
export {};
//# sourceMappingURL=sk_posix.d.ts.map