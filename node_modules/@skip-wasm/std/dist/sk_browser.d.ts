import type { float, int } from "@skiplang/std";
import type { Environment, Wrk, Shared } from "./sk_types.js";
import { MemFS, MemSys } from "./sk_mem_utils.js";
declare class Env implements Environment {
    shared: Map<string, Shared>;
    disableWarnings: boolean;
    fileSystem: MemFS;
    system: MemSys;
    timestamp: () => float;
    decodeUTF8: (utf8: ArrayBuffer) => string;
    encodeUTF8: (str: string) => Uint8Array;
    storage: () => Storage;
    onException: () => void;
    base64Decode: (base64: string) => Uint8Array;
    base64Encode: (toEncode: string, url?: boolean) => string;
    createSocket: (url: string) => WebSocket;
    createWorker: (url: URL, options?: WorkerOptions) => Wrk;
    createWorkerWrapper: (worker: Worker) => Wrk;
    crypto: () => Crypto;
    environment: string[];
    throwRuntime: (code: int) => void;
    fs(): MemFS;
    sys(): MemSys;
    name(): string;
    fetch(url: URL | string): Promise<ArrayBuffer>;
    constructor(environment?: string[]);
}
export declare function environment(environment?: string[]): Env;
export {};
//# sourceMappingURL=sk_browser.d.ts.map