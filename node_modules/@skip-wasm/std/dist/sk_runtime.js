import { Stream } from "./sk_types.js";
class LinksImpl {
    constructor(env) {
        this.env = env;
        this.SKIP_js_get_entropy = () => {
            const buf = new Uint8Array(4);
            const crypto = this.env == undefined ? new Crypto() : this.env.crypto();
            crypto.getRandomValues(buf);
            return new Uint32Array(buf)[0]; // allocated above
        };
        this.complete = (utils, _exports) => {
            this.SKIP_etry = utils.etry;
            this.SKIP_print_error = (msg) => {
                utils.sklog(msg, Stream.ERR, true);
            };
            this.SKIP_print_error_raw = (msg) => {
                utils.sklog(msg, Stream.ERR);
            };
            this.SKIP_print_debug = (msg) => {
                utils.sklog(msg, Stream.DEBUG, true);
            };
            this.SKIP_print_debug_raw = (msg) => {
                utils.sklog(msg, Stream.DEBUG);
            };
            this.SKIP_print_raw = (msg) => {
                utils.sklog(msg, Stream.OUT);
            };
            this.SKIP_print_string = (msg) => {
                utils.sklog(msg, Stream.OUT, true);
            };
            this.js_throw = (exc, rethrow) => utils.ethrow(exc, rethrow != 0);
            this.js_replace_exn = (oldex, newex) => utils.replace_exn(oldex, newex);
            this.SKIP_throw_cruntime = utils.exit;
            this.SKIP_print_char = (c) => {
                const str = String.fromCharCode(c);
                utils.log(str, Stream.OUT);
            };
            this.SKIP_delete_external_exception = utils.deleteException;
            this.SKIP_external_exception_message = (exc) => {
                return utils.exportString(utils.getExceptionMessage(exc));
            };
            this.SKIP_js_time_ms_lo = () => {
                this.lastTime = Date.now();
                // right shift forces a coercion to 32-bit int, so this yields
                // the low 32 bits
                return this.lastTime >>> 0;
            };
            this.SKIP_js_time_ms_hi = () => {
                // the high 32 bits, cannot use shift right without it implicitly
                // coercing to 32-bit, thereby clearing the bits we want
                return Math.floor(this.lastTime / 2 ** 32);
            };
            this.SKIP_js_get_argc = () => utils.args.length;
            this.SKIP_js_get_argn = (index) => {
                const arg = utils.args[index];
                if (arg === undefined)
                    throw new Error(`Invalid arg index: ${index}`);
                return utils.exportString(arg);
            };
            this.SKIP_js_get_envc = () => (this.env ? this.env.environment.length : 0);
            this.SKIP_js_get_envn = (index) => {
                const env = this.env?.environment[index];
                if (env === undefined)
                    throw new Error(`Environment entry not found: ${index}`);
                return utils.exportString(env);
            };
            this.SKIP_read_line_fill = () => {
                this.lineBuffer = utils.readStdInLine();
                return this.lineBuffer.length;
            };
            this.SKIP_read_to_end_fill = () => {
                this.lineBuffer = utils.readStdInToEnd();
                return this.lineBuffer.length;
            };
            this.SKIP_read_line_get = (i) => {
                const line = this.lineBuffer[i];
                if (line === undefined)
                    throw new Error(`Invalid read_line buffer index: ${i}`);
                return line;
            };
            this.SKIP_FileSystem_appendTextFile = (path, contents) => {
                const strPath = utils.importString(path);
                const strContents = utils.importString(contents);
                if (this.env) {
                    this.env.fs().appendToFile(strPath, strContents);
                }
            };
            this.SKIP_setenv = (skName, skValue) => {
                if (this.env) {
                    this.env
                        .sys()
                        .setenv(utils.importString(skName), utils.importString(skValue));
                }
            };
            this.SKIP_getenv = (skName) => {
                if (this.env) {
                    const value = this.env.sys().getenv(utils.importString(skName));
                    return value ? utils.exportString(value) : null;
                }
                return null;
            };
            this.SKIP_unsetenv = (skName) => {
                if (this.env) {
                    this.env.sys().unsetenv(utils.importString(skName));
                }
            };
        };
    }
    SKIP_glock() {
        /* nop since js is sequential */
    }
    SKIP_gunlock() {
        /* nop since js is sequential */
    }
}
class Manager {
    constructor(env) {
        this.env = env;
        this.prepare = (wasm) => {
            const toWasm = wasm;
            const links = new LinksImpl(this.env);
            toWasm._ZSt9terminatev = () => {
                throw new Error("_ZSt9terminatev");
            };
            toWasm._ZNSt9exceptionD2Ev = () => {
                throw new Error("_ZNSt9exceptionD2Ev");
            };
            toWasm._ZNKSt9exception4whatEv = () => {
                throw new Error("_ZNKSt9exception4whatEv");
            };
            toWasm._ZdlPv = () => {
                throw new Error("_ZdlPv");
            };
            toWasm.abort = (err) => {
                throw new Error("Abort " + err);
            };
            toWasm.abortOnCannotGrowMemory = (err) => {
                throw new Error("Abort on cannot grow memory " + err);
            };
            toWasm.__setErrNo = (err) => {
                throw new Error("ErrNo " + err);
            };
            toWasm.__cxa_throw = (_exn, _infi, _dest) => {
                throw new Error("Not managed exception");
            };
            toWasm.js_throw = (excPtr, rethrow) => links.js_throw(excPtr, rethrow);
            toWasm.js_replace_exn = (oldex, newex) => links.js_replace_exn(oldex, newex);
            toWasm.SKIP_throw_cruntime = (code) => links.SKIP_throw_cruntime(code);
            toWasm.cos = Math.cos;
            toWasm.sin = Math.sin;
            toWasm.sqrt = Math.sqrt;
            toWasm.round = Math.round;
            toWasm.ceil = Math.ceil;
            toWasm.pow = Math.pow;
            toWasm.floor = Math.floor;
            toWasm.SKIP_Math_log = Math.log;
            toWasm.SKIP_Math_acos = Math.acos;
            toWasm.SKIP_Math_arcCos = Math.acos;
            toWasm.SKIP_Math_asin = Math.asin;
            toWasm.SKIP_Math_log10 = Math.log10;
            toWasm.SKIP_Math_exp = Math.exp;
            toWasm.SKIP_JS_timeStamp = () => links.SKIP_JS_timeStamp();
            toWasm.SKIP_print_error = (strPtr) => links.SKIP_print_error(strPtr);
            toWasm.SKIP_print_error_raw = (strPtr) => links.SKIP_print_error_raw(strPtr);
            toWasm.SKIP_print_debug = (strPtr) => links.SKIP_print_debug(strPtr);
            toWasm.SKIP_print_debug_raw = (strPtr) => links.SKIP_print_debug_raw(strPtr);
            toWasm.SKIP_print_raw = (strPtr) => links.SKIP_print_raw(strPtr);
            toWasm.SKIP_print_char = (strPtr) => links.SKIP_print_char(strPtr);
            toWasm.SKIP_print_string = (strPtr) => links.SKIP_print_string(strPtr);
            toWasm.SKIP_etry = (f, exn_handler) => links.SKIP_etry(f, exn_handler);
            toWasm.SKIP_delete_external_exception = (actor) => links.SKIP_delete_external_exception(actor);
            toWasm.SKIP_external_exception_message = (actor) => links.SKIP_external_exception_message(actor);
            toWasm.SKIP_js_time_ms_lo = () => links.SKIP_js_time_ms_lo();
            toWasm.SKIP_js_time_ms_hi = () => links.SKIP_js_time_ms_hi();
            toWasm.SKIP_js_get_entropy = () => links.SKIP_js_get_entropy();
            toWasm.SKIP_js_get_argc = () => links.SKIP_js_get_argc();
            toWasm.SKIP_js_get_argn = (index) => links.SKIP_js_get_argn(index);
            toWasm.SKIP_js_get_envc = () => links.SKIP_js_get_envc();
            toWasm.SKIP_js_get_envn = (index) => links.SKIP_js_get_envn(index);
            toWasm.SKIP_FileSystem_appendTextFile = (path, contents) => links.SKIP_FileSystem_appendTextFile(path, contents);
            toWasm.SKIP_read_line_fill = () => links.SKIP_read_line_fill();
            toWasm.SKIP_read_to_end_fill = () => links.SKIP_read_to_end_fill();
            toWasm.SKIP_read_line_get = (index) => links.SKIP_read_line_get(index);
            toWasm.SKIP_setenv = (skName, skValue) => links.SKIP_setenv(skName, skValue);
            toWasm.SKIP_getenv = (skName) => links.SKIP_getenv(skName);
            toWasm.SKIP_unsetenv = (skName) => links.SKIP_unsetenv(skName);
            return links;
        };
    }
}
/* @sk runtime */
export function init(env) {
    return Promise.resolve(new Manager(env));
}
//# sourceMappingURL=sk_runtime.js.map