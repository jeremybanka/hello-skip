import { Options } from "./sk_types.js";
class LinksImpl {
    constructor(environment) {
        this.SKIP_js_invalid = () => {
            throw new Error("Cannot be called within JS");
        };
        this.complete = (utils, _exports) => {
            this.SKIP_check_if_file_exists = (skPath) => {
                return this.fs.exists(utils.importString(skPath));
            };
            this.SKIP_js_open = (skPath, flags, mode) => {
                return this.fs.openFile(utils.importString(skPath), Options.fromFlags(flags), mode);
            };
            this.SKIP_js_close = (fd) => {
                return this.fs.closeFile(fd);
            };
            this.SKIP_js_write = (fd, skContents, len) => {
                // TODO: Write bytes directly into fs.
                this.fs.write(fd, new TextDecoder().decode(utils.importBytes2(skContents, len)));
                return len;
            };
            this.SKIP_js_read = (fd, skContents, len) => {
                const res = this.fs.read(fd, len);
                if (res !== null) {
                    utils.exportBytes2(new TextEncoder().encode(res), skContents);
                }
                return len;
            };
            this.SKIP_js_open_flags = (read, write, append, truncate, create, create_new) => {
                return new Options(read, write, append, truncate, create, create_new).toFlags();
            };
            //
            this.SKIP_js_pipe = this.SKIP_js_invalid;
            this.SKIP_js_fork = this.SKIP_js_invalid;
            this.SKIP_js_dup2 = this.SKIP_js_invalid;
            this.SKIP_js_execvp = this.SKIP_js_invalid;
        };
        this.fs = environment.fs();
    }
}
class Manager {
    constructor(environment) {
        this.environment = environment;
        this.prepare = (wasm) => {
            const toWasm = wasm;
            const links = new LinksImpl(this.environment);
            toWasm.SKIP_js_open = (skPath, flags, mode) => links.SKIP_js_open(skPath, flags, mode);
            toWasm.SKIP_js_close = (fd) => links.SKIP_js_close(fd);
            toWasm.SKIP_js_write = (fd, skContents, len) => links.SKIP_js_write(fd, skContents, len);
            toWasm.SKIP_js_read = (fd, skContents, len) => links.SKIP_js_read(fd, skContents, len);
            toWasm.SKIP_js_open_flags = (read, write, append, truncate, create, create_new) => links.SKIP_js_open_flags(read, write, append, truncate, create, create_new);
            //
            /* eslint-disable @typescript-eslint/no-unsafe-return */
            toWasm.SKIP_js_pipe = () => links.SKIP_js_pipe();
            toWasm.SKIP_js_fork = () => links.SKIP_js_fork();
            toWasm.SKIP_js_dup2 = () => links.SKIP_js_dup2();
            toWasm.SKIP_js_execvp = () => links.SKIP_js_execvp();
            /* eslint-enable @typescript-eslint/no-unsafe-return */
            return links;
        };
    }
}
/* @sk init */
export function init(env) {
    return Promise.resolve(new Manager(env));
}
//# sourceMappingURL=sk_posix.js.map