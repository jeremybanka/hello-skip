import type { float, int, Nullable } from "@skiplang/std";
import type { ptr, Links, Utils, ToWasmManager, Environment } from "./sk_types.js";
import type * as Internal from "@skiplang/std/internal.js";
declare class LinksImpl implements Links {
    private readonly env?;
    lineBuffer: int[];
    lastTime: int;
    constructor(env?: Environment | undefined);
    SKIP_read_line_fill: () => int;
    SKIP_read_to_end_fill: () => int;
    SKIP_read_line_get: (index: int) => int;
    SKIP_print_error: (strPtr: ptr<Internal.String>) => void;
    SKIP_print_error_raw: (strPtr: ptr<Internal.String>) => void;
    SKIP_print_debug: (strPtr: ptr<Internal.String>) => void;
    SKIP_print_debug_raw: (strPtr: ptr<Internal.String>) => void;
    SKIP_print_raw: (strPtr: ptr<Internal.String>) => void;
    SKIP_print_char: (code: int) => void;
    SKIP_print_string: (strPtr: ptr<Internal.String>) => void;
    SKIP_etry: <Ret>(f: ptr<Internal.Function<Internal.Void, Internal.T<Ret>>>, exn_handler: ptr<Internal.Function<Internal.Void, Internal.T<Ret>>>) => ptr<Internal.T<Ret>>;
    js_throw: (excPtr: ptr<Internal.Exception>, rethrow: int) => void;
    js_replace_exn: (oldex: ptr<Internal.Exception>, newex: ptr<Internal.Exception>) => void;
    SKIP_throw_cruntime: (code: int) => void;
    SKIP_JS_timeStamp: () => float;
    SKIP_delete_external_exception: (exc: int) => void;
    SKIP_external_exception_message: (exc: int) => ptr<Internal.String>;
    SKIP_FileSystem_appendTextFile: (path: ptr<Internal.String>, contents: ptr<Internal.String>) => void;
    SKIP_js_time_ms_lo: () => int;
    SKIP_js_time_ms_hi: () => int;
    SKIP_js_get_entropy: () => number;
    SKIP_js_get_argc: () => int;
    SKIP_js_get_argn: (index: int) => ptr<Internal.String>;
    SKIP_js_get_envc: () => int;
    SKIP_js_get_envn: (index: int) => ptr<Internal.String>;
    SKIP_setenv: (skName: ptr<Internal.String>, skvalue: ptr<Internal.String>) => void;
    SKIP_getenv: (skName: ptr<Internal.String>) => Nullable<ptr<Internal.String>>;
    SKIP_unsetenv: (skName: ptr<Internal.String>) => void;
    SKIP_glock(): void;
    SKIP_gunlock(): void;
    complete: (utils: Utils, _exports: object) => void;
}
declare class Manager implements ToWasmManager {
    private readonly env?;
    constructor(env?: Environment | undefined);
    prepare: (wasm: object) => LinksImpl;
}
export declare function init(env?: Environment): Promise<Manager>;
export {};
//# sourceMappingURL=sk_runtime.d.ts.map