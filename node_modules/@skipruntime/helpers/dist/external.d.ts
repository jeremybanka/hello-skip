import type { Entry, ExternalService, Json } from "@skipruntime/api";
/**
 * Interface required by `GenericExternalService` for external resources.
 */
export interface ExternalResource {
    open(params: Json, callbacks: {
        update: (updates: Entry<Json, Json>[], isInit: boolean) => void;
        error: (error: Json) => void;
        loading: () => void;
    }): void;
    close(params: Json): void;
}
/**
 * A generic external service providing external resources.
 *
 * `GenericExternalService` provides an implementation of `ExternalService` for external resources by lifting the `open` and `close` operations from `ExternalResource` to the `subscribe` and `unsubscribe` operations required by `ExternalService`.
 */
export declare class GenericExternalService implements ExternalService {
    private readonly resources;
    /**
     * @param resources - Association of resource names to `ExternalResource`s.
     */
    constructor(resources: {
        [name: string]: ExternalResource;
    });
    subscribe(resourceName: string, params: Json, callbacks: {
        update: (updates: Entry<Json, Json>[], isInit: boolean) => void;
        error: (error: Json) => void;
        loading: () => void;
    }): void;
    unsubscribe(resourceName: string, params: Json): void;
    shutdown(): void;
}
export declare class TimerResource implements ExternalResource {
    private readonly intervals;
    open(params: Json, callbacks: {
        update: (updates: Entry<Json, Json>[], isInit: boolean) => void;
        error: (error: Json) => void;
        loading: () => void;
    }): void;
    close(params: Json): void;
}
/**
 * An external resource that is refreshed at some polling interval.
 *
 * @typeParam S - Type of data received from external resource.
 * @typeParam K - Type of keys.
 * @typeParam V - Type of values.
 */
export declare class Polled<S extends Json, K extends Json, V extends Json> implements ExternalResource {
    private readonly url;
    private readonly duration;
    private readonly conv;
    private readonly encodeParams;
    private readonly intervals;
    /**
     * @param url - HTTP endpoint of external resource to poll.
     * @param duration - Refresh interval, in milliseconds.
     * @param conv - Function to convert data of type `S` received from external resource to `key`-`value` entries.
     * @param encodeParams - Function to use to encode params of type `Json` for external resource request.
     */
    constructor(url: string, duration: number, conv: (data: S) => Entry<K, V>[], encodeParams?: (params: Json) => string);
    open(params: Json, callbacks: {
        update: (updates: Entry<Json, Json>[], isInit: boolean) => void;
        error: (error: Json) => void;
        loading: () => void;
    }): void;
    close(params: Json): void;
}
//# sourceMappingURL=external.d.ts.map