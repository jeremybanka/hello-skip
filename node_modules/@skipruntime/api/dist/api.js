/**
 * This is the Skip Runtime public API: types and operations that can be used to write and interact with reactive computations.
 *
 * @packageDocumentation
 */
export { deepFreeze } from "@skiplang/json";
/**
 * Specialized `Mapper` which maps values one-to-one.
 *
 * A specialized form of `Mapper` which maps values one-to-one, reusing the input collection's key structure in the output collection.
 * Use this form to map each value associated with a key to an output value for that key.
 * This saves some boilerplate: instead of writing the fully general `mapEntry` that potentially modifies, adds, or removes keys, just implement the simpler `mapValue` to transform individual values.
 *
 * @typeParam K - Type of input and output keys.
 * @typeParam V1 - Type of input values.
 * @typeParam V2 - Type of output values.
 * @hideconstructor
 */
export class OneToOneMapper {
    /**
     * @ignore
     * @hidden
     */
    mapEntry(key, values) {
        return values.toArray().map((v) => [key, this.mapValue(v, key)]);
    }
}
/**
 * Specialized `Mapper` which maps values one-to-many.
 *
 * A specialized form of `Mapper` which maps values one-to-many, reusing the input collection's key structure in the output collection.
 * Use this form to map each value associated with a key to any number of values for that same key.
 * This saves some boilerplate: instead of writing the fully general `mapEntry` that potentially modifies, adds, or removes keys, just implement the simpler `mapValue` to transform the values associated with each key.
 *
 * @typeParam K - Type of input and output keys.
 * @typeParam V1 - Type of input values.
 * @typeParam V2 - Type of output values.
 * @hideconstructor
 */
export class OneToManyMapper {
    /**
     * @ignore
     * @hidden
     */
    mapEntry(key, values) {
        const res = [];
        for (const v1 of values)
            for (const v2 of this.mapValue(v1, key))
                res.push([key, v2]);
        return res;
    }
}
/**
 * Specialized `Mapper` which maps values many-to-one.
 *
 * A specialized form of `Mapper` which maps values many-to-one, reusing the input collection's key structure in the output collection.
 * Use this form to map all the values associated with a key to a single output value for that same key.
 * This saves some boilerplate: instead of writing the fully general `mapEntry` that potentially modifies, adds, or removes keys, just implement the simpler `mapValues` to transform the values associated with each key.
 *
 * @typeParam K - Type of input and output keys.
 * @typeParam V1 - Type of input values.
 * @typeParam V2 - Type of output values.
 * @hideconstructor
 */
export class ManyToOneMapper {
    /**
     * @ignore
     * @hidden
     */
    mapEntry(key, values) {
        return [[key, this.mapValues(values, key)]];
    }
}
/**
 * Exception indicating a key did not have a unique value.
 *
 * Some collections are used to associate each key to a unique value.
 * When this expectation is not met (a key is associated to either zero or multiple values), operations such as `getUnique` throw `NonUniqueValueException`.
 * @hideconstructor
 */
export class NonUniqueValueException extends Error {
}
//# sourceMappingURL=api.js.map