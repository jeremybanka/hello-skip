import { run } from "@skip-wasm/std";
import { init as runtimeInit } from "@skip-wasm/std/runtime.js";
import { init as posixInit } from "@skip-wasm/std/posix.js";
import { init as skjsonInit } from "@skip-wasm/json";
import { init as skruntimeInit } from "./internals/skipruntime_module.js";
const modules = [
    runtimeInit,
    posixInit,
    skjsonInit,
    skruntimeInit,
];
async function wasmUrl() {
    //@ts-expect-error  ImportMeta is incomplete
    if (import.meta.env || import.meta.webpack) {
        const imported = (await import(
        //@ts-expect-error  Cannot find module './skstore.wasm?url' or its corresponding type declarations.
        "./libskip-runtime-ts.wasm?url"));
        return imported.default;
    }
    return new URL("./libskip-runtime-ts.wasm", import.meta.url);
}
export async function initService(service) {
    const data = await run(wasmUrl, modules, []);
    const factory = data.environment.shared.get("ServiceInstanceFactory");
    return factory.initService(service);
}
//# sourceMappingURL=skipruntime_init.js.map