var _a, _b, _c, _d;
import { sknative } from "@skiplang/std";
/**
 * `Reducer` to maintain the sum of input values.
 *
 * A `Reducer` that maintains the sum of values as they are added and removed from a collection.
 */
export class Sum {
    constructor() {
        this[_a] = "sum";
    }
}
_a = sknative;
/**
 * `Reducer` to maintain the minimum of input values.
 *
 * A `Reducer` that maintains the minimum of values as they are added and removed from a collection.
 */
export class Min {
    constructor() {
        this[_b] = "min";
    }
}
_b = sknative;
/**
 * `Reducer` to maintain the maximum of input values.
 *
 * A `Reducer` that maintains the maximum of values as they are added and removed from a collection.
 */
export class Max {
    constructor() {
        this[_c] = "max";
    }
}
_c = sknative;
/**
 * `Reducer` to maintain the count of input values.
 *
 * A `Reducer` that maintains the number of values as they are added and removed from a collection.
 */
export class Count {
    constructor() {
        this[_d] = "count";
    }
}
_d = sknative;
//# sourceMappingURL=utils.js.map