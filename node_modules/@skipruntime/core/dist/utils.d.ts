import type { Nullable } from "@skip-wasm/std";
import { type NativeStub, sknative } from "@skiplang/std";
import type { Reducer, Json } from "@skipruntime/api";
/**
 * `Reducer` to maintain the sum of input values.
 *
 * A `Reducer` that maintains the sum of values as they are added and removed from a collection.
 */
export declare class Sum implements NativeStub, Reducer<number, number> {
    [sknative]: string;
    initial: number;
    add: (accum: number) => number;
    remove: (accum: number) => Nullable<number>;
}
/**
 * `Reducer` to maintain the minimum of input values.
 *
 * A `Reducer` that maintains the minimum of values as they are added and removed from a collection.
 */
export declare class Min implements NativeStub, Reducer<number, number> {
    [sknative]: string;
    initial: number;
    add: (accum: number) => number;
    remove: (accum: number) => Nullable<number>;
}
/**
 * `Reducer` to maintain the maximum of input values.
 *
 * A `Reducer` that maintains the maximum of values as they are added and removed from a collection.
 */
export declare class Max implements NativeStub, Reducer<number, number> {
    [sknative]: string;
    initial: number;
    add: (accum: number) => number;
    remove: (accum: number) => Nullable<number>;
}
/**
 * `Reducer` to maintain the count of input values.
 *
 * A `Reducer` that maintains the number of values as they are added and removed from a collection.
 */
export declare class Count<T extends Json> implements Reducer<T, number>, NativeStub {
    [sknative]: string;
    initial: number;
    add: (accum: number) => number;
    remove: (accum: number) => Nullable<number>;
}
//# sourceMappingURL=utils.d.ts.map